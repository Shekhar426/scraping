import json


from selenium.webdriver import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import openpyxl
from seleniumbase import Driver


driver = Driver(uc=True, headed=False, browser='chrome', headless=True)
wait = WebDriverWait(driver, 20)


workbook = openpyxl.load_workbook("data.xlsx")
sheet = workbook['Sheet1']
max_row = sheet.max_row

def append_dict_to_list_and_save(dictionary, file_path):
    try:
        # Read the existing data from the JSON file (if it exists)
        with open(file_path, 'r') as file:
            data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        # If the file doesn't exist or is empty, create an empty list
        data = []
    # Append the new dictionary to the list
    data.append(dictionary)
    # Save the updated data back to the JSON file
    with open(file_path, 'w') as file:
        json.dump(data, file, indent=4)

# Dictionary to append to the list
json_file_path = 'description/9.json'

for row_num in range(1000, 1500):
    ITEM = sheet.cell(row=row_num, column=1).value
    print(type(ITEM))
    missing = ['912289', '05141X', '11105X', '448887', '358290', '145617', '8403197', '8765954', '164437', 'DV3701-CP', '010208', '161405', '264603', 'CD35479-22', 'CD13564', '160818', '01901X', '150356', '104660', 'DA25408-11', '729085', '054501', '274333', 'CD19533', '204303', '300658', '582265', '525449', '984379', '138436', '8768136', '892378', '0600L', '161363', '757679', '39344S', 'CD67660', '39211X3', '22329DF', '415761', '8020570', '8770861', 'DV3141-CP', '236508', '146893', '694981', 'CD11138', '152732', 'DA25402-9', '4014325', '8771273', '7200179', '520921', '565226', '004890', '076892', '154927', '8772060', '0134645', '171808', '450610', 'CD14119', 'CD7300-20', '579212', '6011614', 'DA19141-22', '157673', '463361', '202083', '199686', '3478DF', '0135185', 'CD68895', 'DV2255-CP', '065477', '130279', '157662', '8765915', '809421', '769584', '522723', '942144', '813606', '162168', '8770177', '159382', '0381942', '157341', '7350926', '5122128', '8321030', '5597BD', '378258', '134307', '463196', '991848', 'DV3851-CP', 'DV2257-CP', '286654', '8772076', '117834', '007351', '190883', 'DV2448-CP', '258673', '474374', '0100042', '873106', 'CD11143', '6012441', '155268', '559959', '7148079', '627163', '010588', '711469', '3105263', '14836X', '6108320', 'CD13685', '168394', '0132542', 'CD65412', '702350', '561091', '580292', '162016', '150696', '016273', '522879', '8771206', '100921', '092920', 'DV2101-CP', '513007', '501736', '7500874', '022624', '5581BD', '157223', '424915', '563649', '010233-12', '3733428', '320994', 'DA14892-4', '377856', '061876', '7736546', '781644', '002416', '661151', '6011370', 'CD10888', '6011273', '665831', '143197', '764750', '643771', '0739594', '058526', '684865', '246120', '799328', '528823', '4387S', '0133174', '611580', '0139831', '683782', '219134', 'CD69416', '791015', '152698', '155245', '157665', '2068BD', '46015X', '709184', '0130173', '028303', '721273', '138478', '147693', '295251', '618226', '160949', '31712', '31682', '051701', '923700', '134276', 'CD01937', 'CD14291', '8771103', '250456', '31771', 'CD14095', '868015', '109257', '161747', '629077', 'CD78721', 'CD7300-162', '162319', '157731', '318384', '6408109', '378453', '227096', '160407', '350256', '607635', '5224804', 'CD0360', '575597', '406027', '010233-20', '601189', '701841', 'CD14288', 'DV2187-CP', '041661', '152360', 'DA20830-2', 'DA14895-6', '685012', '158036', '142203', '053076', '461456', 'CD46428', '6401471', '283572', 'CD21709', '104150', '548434', '0024XL', '06863X', '3142DF', '020376', '087896', '52210XL', '236762', '1988DF', '492504', '039890', 'CD13566', '868260', '685549', 'DV3830-CP', '158271', '0137646', '024471', '3448507', '004430', '096595', '385312X', '369482', 'CD2783', 'DV4261-CP', '294935', '308625', 'DV2623-CP', '148983', '015849', '6011436', '69538', '264488', '161373', '7357547', '65736AC', 'DA14895-3', '157934', 'DV3694-CP', '007375', '066766', '112501', '686591', '2952BD', '158957', '358983', '322084', '3215092', 'CD13703', '545651', '1578DF', '981979', '108320', '123537', 'DV3328-CP', '371894', '612290', '25586DF', '095872', '162314', '754161', '146915', '095492', '158263', 'CD13295', '8017340', '2991BD', '091947', '25616DF', 'CD47024', '322172', '358110', '6425860', '304685', 'CD12087', '686409', '926618', '1443106', '525010', '990285', 'CD0027X-61', '1431M', '191132', '030589', '138549', '570503', '52453X', 'CD41327', '290207', '020367', '145581', '252727', 'DV1642-CP', '7352255', '163505', '312876', '226543', '683378', '7352940', '0130258', '8766089', '522005', '518003', '133533', '4502026', '311083', '256704', '146886', '261600', '715506', '701960', '564740', '329827', '589045', '218441', '888370', '174284', 'DV1907-CP', '538525', '599504', 'DV3165-CP', 'CD19718', '156534', '1839S', '7122435', '134087', '251336', '003483', '673442', '370804', '147172', '615435', '104749', '2722030', '406093', '4381YM', '156552', '315841', '819773', 'CD69391', 'CD27740', 'DV4444-CP', '16017X', 'DV2335-CP', '707222', '474977', '823898', '315931', '483901', '823672', '129583', '584668', '987114', '158151', '033689', '234432', '81739EB', '385522', '135372', '5660BD', 'DV3856-CP', '4003159', '6012670', '026646', '2229M', '2130688', '158381', '909032', '7012831', '701784', '066131', '564791', '304894', '157937', '147927', '6401507', '6010666', '147021', '354012', '014616', '2704627', '339466', '2592DF', 'DV2893-CP', '197489', '226446', '162456', 'DA14901-4', '501149', '777315', '4139324', '377431', '6011503', '180344', '20730X', '148406', '159975', '174157', '059605', '166112', '160239', '137839', '163173', '909648', '671252', '308638', 'CD6361', '010607X', '02687X', '1496X3', '548027', '403622', 'DV3619-CP', '577178', '124262', '290491', '158195', '6011360', '317102', '1116695', '208766', '8771125', '162414', '454216', 'DA14914-2', '313797', '0101564', '382655', '8117238', '104143X', '318698', '160555', '4061L', '0135604', '057635', '2805X3', 'CD11264', '9951YM', '991801', 'DA20642-10', '563156', '677073', '6000131', '023755', '157392', '286481', '073951', '069229', '566290', '5198BD', '630494', '148506', '370712', '6474624', '377246', '163638', '357105', '643031', '584154', '157202', 'CD4669', '6442654', 'DA14920-2', '149868', 'CD49938', 'CD13706', '6409101', '770855', '378398', '770767', '1169DF', '6652375', '034182', '010233-11', '246077', '4126025', '9479806', '070708', 'DA14905-10', 'CD35299', '801700', 'CD74628', '6012238', '797001', 'DV4470-CP', 'CD7979-101', '704818', '147495', '5133957', '840400', 'CD14179', '508315', '322836', '158793', '15876X', '410879', '684337', 'DA14903-1', '145537', '373660', 'DV1332-CP', '8933X', '089005X', '646170', '353805', 'CD47720', '508854', '3441170', 'DV2524-CP', '6011986', '3627506', 'CD03010', '0136014', '992499', '1560XL', '824844', '42678', '2134508', '576393', '6528XX', 'DV2404-CP', '521591', '506187', '46076', '204155', '0203110', '2821BD', '8771870', '092953', '7129351', '329657', '461395', '400013', 'CD21921', 'DV4087-CP', '4033057', '4068M', '6150BD', 'CD61700', '304522', '153627', '283650', '6332503', '16062X', '149731', '151393', 'DA21578-4', '703598', '697184', '438855', 'CD87125', '7000743', '228095', '5087BD', '195634', 'CD33826', '980391', '258975', '135221', '845X3', '8264139', '25624XL', '652337', '160986', '967676', '143974', '34209DF', '647659', '310802', 'DA22505-8', '6012343', '16387X', 'DV2516-CP', '5092BD', '983522', '822664', 'CD43025', '5200BD', 'CD25527', '286520', '0136748', '014137', '824850', '1054DF', '806270', '695730', '7129368', '181835', '015870', '539091', '822468', '68926X', '114005', '283142', '8965469', '9611110', 'DA15201-1', '803129', '503021', '316309', 'CD4807', 'DA14884-5', 'CD12895', '433598', '157921', '030847X', '160517', '077259', '021977', '9709899', '652342', '6408096', '77323X', '201277', '474008', '997722', '0131224', '2921DF', '678508', '6013432', '221164', '8424M', '697485', '156741', '013167', 'DA14928-5', '7810035', '777331', 'CD31727', '142741', '545668', 'CD94526', '8771480', '066085', '8771181', '150912', '406084', '365871', '505600', '647017', '213409', '9933M', '213954', '58362X', '31848', '2132699', '157907', '157651', '1890M', 'DV3697-CP', '52455S', '1233190', '2700247', '52481X', '003043', '6794XL', '017051', '22043XL', '320679', '163039', 'DA14908-CP', '159367', 'DV2220-CP', '824813', '006314', '853249', '612105', '628117', '695531', '528589', '134247', '2130268', '371887', '495250', 'CD14285', '272923', '162366', '7105087', '34594DF', '16018X', '401460', 'CD3689-10', 'DV2890-CP', '0137882', '372562', 'CD02421-18', 'DA14892-1', '825498', '136243', '462308', '409234', '147522', '1570DF', 'DV1906-CP', '6011368', '122447', '317050', '2213760', '311806', '4115111', '9145684', '9105309', '586653', '253211', '6401436', '472840', '147026', 'CD81826', '741421', '6474857', '162270', '231276', '571791', '158298', '317214', '012865', 'CD12250', 'DV2972-CP', '8769517', '9603508', '222716', '7137653', 'CD12201', '141950', '054235', '401199', 'CD01818', '853151', '684291', 'DA25394-6', '7359048', '186850', '0138704', 'CD90623', '508038', '104266', '328206', '863643', '793195', '242403', '3006BD', 'DV3005-CP', '546651', '6012206', 'DV2343-CP', '480377', '683324', '709052', '371726', '26083X', '864151', '762628', '042349', '159579', '670160', '134013', '3222021', '6408114', '159344', '490068', 'CD29863', 'DA14906-9', '1725DF', 'DA14881-2', '540799', '8771658', 'DV2688-CP', '138857', '568342', 'DA21681-4', '0471300', 'CD11115', '138989', 'CD8123', '480802', '477918', 'DA14890-6', '502231', '702842', '6012086', '16079X', '204084', '6012000', '1107792', '6407046', '237384', 'DV4552-CP', 'DV3378-CP', '8965490', '782754', '6011343', '60360X', '9782425', '153380', '097559', 'DV2510-CP', 'CD72712', '6407042', '932410', 'CD69985', '654321', 'CD14260', '200795', 'DA19120-10', '998835', '703971', '515901X', 'CD3689-29', '582527', 'CD29322', '161095', '152679', '8768159', '135608', '365068', '1739XX', '01189X', '152862', 'CD87922', '643061', '7149922', '133931', '055535', '149020', '5174BD', '770363', '97318', '013227', '9413', '4739410', 'CD45896', 'DV3928-CP', '522907', '888326', '0131972', '506104', '408240', '093553', '455323', '990235', '126497', '6425709', '168354', 'DV2511-CP', 'CD72180', '133520', '697715', 'CD7300-110', '199372', '031801', '171156', 'DV2325-CP', '310991', '3540DF', '152579', '159547', '000589', '687413', '378383', '15120X', '698346', '698795', '641455', '1812053', 'CD00415', '7150447', '173547', '065743', '6011320', '2215XL', 'DA14884-11', '009084', '023082', '271204', '322677', 'DA14915-5', 'DV2389-CP', '5133865', 'DV2148-CP', '9117520', '8134266', '128029', '558952', '401506', '160696', '8772029', '563069', '5122BD', '648598', '126484', 'DA14930-11', '597359', '715926', '1733DF', '008161', '992208', '716104', '970501', '161429', '5125457', '125879', '4134679', 'CD93888', '040246', '8769494', '8136406', '619346', 'CD14258', '133540', 'DV2663-CP', '8237159', '6050XL', '957974', 'DV1913-CP', '085549', '695833', 'DA14914-10', '017580', '177996', '52440S', '577998', '0139435', '4033267', '742501', '2230L', '415511', 'CD7300-156', '3127DF', '652393', '86369', '023933', '159689', '81264', '815289', '374979', '162654', '203373', '776123', '584147', 'CD14335', '484038', '9039XL', '167916', '506170', '088970', '5554BD', '015068', '775993', '152426', 'DV2145-CP', '8771954', '515328', 'CD9252X', '7350120', '1720DF', '026171', '6011988', 'DA21564-3', '152472', '190735', '433838', '042291', '359289', '8769548', '308332', 'CD90221', '149969', '238121', 'DV4294-CP', 'DA20642-5', '121474', '388149', '182694', '0120703', '149546', '620329', '016682', '259212', '354694', '719192', '6012465', '984973', 'DV4287-CP', '40580XX', '9709011', '715525', '153586', '305228', '8771063', '585615', '7352196', '085663', 'CD13097', '397654', 'CD35616', '9440318', '931570', '9388XL', '001466', '6408091', '508387', '6379094', '523009', '481945', '153362', '697967', '5293020', '321605', 'DV1375-CP', '409080', '9247S', '8771984', '054178', '161428', '26720XL', '2124219', '226851X', '228217', '153613', 'DV2428-CP', 'CD72810', '1111034', '239660', '4395XX', '683668', '526919', '139941', '919530', '9999519', '152643', '044954', '159387', '069209', '7357204', '113367', '137060', '6012137', '138159', '162181', '0125588', '588114', 'CD16932', '6012234', '3760DF', 'CD79927', 'DA14902-2', '520822', '6401459', '159588', '397739', 'CD12419', 'DV4255-CP', '479387', '149142', '521278', 'DA25394-14', '162409', '8770163', 'CD14317', '016136', '014261', '65743AC', '5129684', 'DV3245-CP', '5551BD', '610322', '194145', '820778', '315877', '0137257', '0442128', '2013003', '540708', '863849', '611181', '3776571', '159990', '156195', '7000378', '322752', '698674', 'CD02421-30', '145591', '095953', '15041X', '146865', '34825DF', '13090X', '700325', '268992', '015101', 'CD2788', '327273', '205635', '7011940', 'CD98714', '9616X3', '296066']
    if ITEM in missing:
        ITEM_NAME_DESCRIPTION = sheet.cell(row=row_num, column=2).value
        PRODUCT_TYPE = sheet.cell(row=row_num, column=3).value
        UPC = sheet.cell(row=row_num, column=4).value
        ISBN13 = sheet.cell(row=row_num, column=5).value
        ISBN = sheet.cell(row=row_num, column=6).value
        PRODUCT = sheet.cell(row=row_num, column=7).value
        driver.get("https://www.christianbook.com")
        wait.until(EC.visibility_of_element_located((By.XPATH, "//input[@id='Ntt']"))).send_keys(ITEM)
        wait.until(EC.visibility_of_element_located((By.XPATH, "//input[@id='Ntt']"))).send_keys(Keys.ENTER)
        print("Identifying Page Type...")
        try:
            Product_Name = wait.until(EC.visibility_of_all_elements_located((By.XPATH, "//h1[@class='CBD-ProductDetailTitle']")))
            No_Product_Found = []
            Multi_product_Found = []
        except:
            try:
                No_Product_Found = wait.until(EC.visibility_of_all_elements_located((By.XPATH, "//h1[text()='No Search Results Found']")))
                Product_Name = []
                Multi_product_Found = []
            except:
                try:
                    Multi_product_Found = wait.until(EC.visibility_of_all_elements_located((By.XPATH, "//p[@class='CB-ProductListItem-Title']")))
                    Product_Name = []
                    No_Product_Found = []
                except:
                    Product_Name = []
                    No_Product_Found = []
                    Multi_product_Found = []
        print("Page Identification Completed Successfully...")
        if len(Product_Name) == 1 and len(No_Product_Found) == 0 and len(Multi_product_Found) == 0:
            print("Product found. Entered in IF Condition")
            productUrl = driver.find_element(By.XPATH, "//meta[@property='og:url']").get_attribute('content')
            description = driver.find_element(By.XPATH, "//meta[@name='description']").get_attribute('content')
            images = []
            allImages = driver.find_elements(By.XPATH, "//div[@id='CBD-ProductThumbnailWrapper']/ul/li/span/..")
            if len(allImages) > 0:
                for img in allImages:
                    singleImage1 = img.get_attribute('data-fullsrc')
                    if "https" not in singleImage1:
                        singleImage = "https:" + singleImage1
                        images.append(singleImage)
                    else:
                        images.append(singleImage1)
            else:
                singleImage2 = driver.find_element(By.XPATH,"//div[@class='CBD-ProductImageContainer']//img").get_attribute('src')
                images.append(singleImage2)
            parsed_data = {
                "item": ITEM,
                "item_name_description": ITEM_NAME_DESCRIPTION,
                "product_type": PRODUCT_TYPE,
                "upc": UPC,
                "isbn13": ISBN13,
                "isbn": ISBN,
                "product": PRODUCT,
                "productUrl": productUrl,
                "images": images,
                "description": description
            }
            append_dict_to_list_and_save(parsed_data, json_file_path)
        elif len(Product_Name) == 0 and len(No_Product_Found) == 1 and len(Multi_product_Found) == 0:
            print("No Product found. Entered in First ELIF Condition")
            parsed_data = {
                "item": ITEM,
                "item_name_description": ITEM_NAME_DESCRIPTION,
                "product_type": PRODUCT_TYPE,
                "upc": UPC,
                "isbn13": ISBN13,
                "isbn": ISBN,
                "product": PRODUCT,
                "productUrl": None,
                "images": None,
                "description": None
            }
            append_dict_to_list_and_save(parsed_data, json_file_path)
        elif len(Product_Name) == 0 and len(No_Product_Found) == 0 and len(Multi_product_Found) > 0:
            print("Multi Product Found. Entered in Second ELIF Condition")
            try:
                wait.until(EC.element_to_be_clickable((By.XPATH, f"//p[@class='CB-ProductListItem-Title']/ancestor::div[@class='CB-ProductListItem-InfoContent']//p[contains(text(), '{ITEM}')]"))).click()
                productUrl = driver.find_element(By.XPATH, "//meta[@property='og:url']").get_attribute('content')
                images = []
                allImages = driver.find_elements(By.XPATH, "//div[@id='CBD-ProductThumbnailWrapper']/ul/li/span/..")
                if len(allImages) > 0:
                    for img in allImages:
                        singleImage1 = img.get_attribute('data-fullsrc')
                        if "https" not in singleImage1:
                            singleImage = "https:" + singleImage1
                            images.append(singleImage)
                        else:
                            images.append(singleImage1)
                else:
                    singleImage2 = driver.find_element(By.XPATH,"//div[@class='CBD-ProductImageContainer']//img").get_attribute('src')
                    images.append(singleImage2)
                description = driver.find_element(By.XPATH, "//meta[@name='description']").get_attribute('content')
                parsed_data = {
                    "item": ITEM,
                    "item_name_description": ITEM_NAME_DESCRIPTION,
                    "product_type": PRODUCT_TYPE,
                    "upc": UPC,
                    "isbn13": ISBN13,
                    "isbn": ISBN,
                    "product": PRODUCT,
                    "productUrl": productUrl,
                    "images": images,
                    "description": description
                }
                append_dict_to_list_and_save(parsed_data, json_file_path)
            except:
                parsed_data = {
                    "item": ITEM,
                    "item_name_description": ITEM_NAME_DESCRIPTION,
                    "product_type": PRODUCT_TYPE,
                    "upc": UPC,
                    "isbn13": ISBN13,
                    "isbn": ISBN,
                    "product": PRODUCT,
                    "productUrl": None,
                    "images": None
                }
                append_dict_to_list_and_save(parsed_data, json_file_path)
        print(f"Row {row_num} processed")